import React, { forwardRef, useRef, useContext } from 'react';
import Box from '../Box/Box.js';
import '@styled-system/css';
import merge from 'deepmerge';
import { UnderlineNavContext } from './UnderlineNavContext.js';
import CounterLabel from '../CounterLabel/CounterLabel.js';
import { getLinkStyles, iconWrapStyles, counterStyles } from './styles.js';
import { LoadingCounter } from './LoadingCounter.js';
import useIsomorphicLayoutEffect from '../utils/useIsomorphicLayoutEffect.js';
import { defaultSxProp } from '../utils/defaultSxProp.js';
import Link from '../Link/Link.js';

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

// adopted from React.AnchorHTMLAttributes

const UnderlineNavItem = /*#__PURE__*/forwardRef(({
  sx: sxProp = defaultSxProp,
  as: Component = 'a',
  href = '#',
  children,
  counter,
  onSelect,
  'aria-current': ariaCurrent,
  icon: Icon,
  ...props
}, forwardedRef) => {
  const backupRef = useRef(null);
  const ref = forwardedRef !== null && forwardedRef !== void 0 ? forwardedRef : backupRef;
  const {
    theme,
    setChildrenWidth,
    setNoIconChildrenWidth,
    loadingCounters,
    iconsVisible
  } = useContext(UnderlineNavContext);
  useIsomorphicLayoutEffect(() => {
    if (ref.current) {
      const domRect = ref.current.getBoundingClientRect();
      const icon = Array.from(ref.current.children).find(child => child.getAttribute('data-component') === 'icon');
      const content = Array.from(ref.current.children).find(child => child.getAttribute('data-component') === 'text');
      const text = content.textContent;
      const iconWidthWithMargin = icon ? icon.getBoundingClientRect().width + Number(getComputedStyle(icon).marginRight.slice(0, -2)) + Number(getComputedStyle(icon).marginLeft.slice(0, -2)) : 0;
      setChildrenWidth({
        text,
        width: domRect.width
      });
      setNoIconChildrenWidth({
        text,
        width: domRect.width - iconWidthWithMargin
      });
    }
  }, [ref, setChildrenWidth, setNoIconChildrenWidth]);
  const keyDownHandler = React.useCallback(event => {
    if ((event.key === ' ' || event.key === 'Enter') && !event.defaultPrevented && typeof onSelect === 'function') {
      onSelect(event);
    }
  }, [onSelect]);
  const clickHandler = React.useCallback(event => {
    if (!event.defaultPrevented && typeof onSelect === 'function') {
      onSelect(event);
    }
  }, [onSelect]);
  return /*#__PURE__*/React.createElement(Box, {
    as: "li",
    sx: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React.createElement(Link, _extends({
    ref: ref,
    as: Component,
    href: href,
    "aria-current": ariaCurrent,
    onKeyDown: keyDownHandler,
    onClick: clickHandler,
    sx: merge(getLinkStyles(theme, ariaCurrent), sxProp)
  }, props), iconsVisible && Icon && /*#__PURE__*/React.createElement(Box, {
    as: "span",
    "data-component": "icon",
    sx: iconWrapStyles
  }, /*#__PURE__*/React.createElement(Icon, null)), children && /*#__PURE__*/React.createElement(Box, {
    as: "span",
    "data-component": "text",
    "data-content": children,
    sx: Boolean(ariaCurrent) && ariaCurrent !== 'false' ? {
      fontWeight: 600
    } : {}
  }, children), loadingCounters ? /*#__PURE__*/React.createElement(Box, {
    as: "span",
    "data-component": "counter",
    sx: counterStyles
  }, /*#__PURE__*/React.createElement(LoadingCounter, null)) : counter !== undefined && /*#__PURE__*/React.createElement(Box, {
    as: "span",
    "data-component": "counter",
    sx: counterStyles
  }, /*#__PURE__*/React.createElement(CounterLabel, null, counter))));
});
UnderlineNavItem.displayName = 'UnderlineNavItem';

export { UnderlineNavItem };
