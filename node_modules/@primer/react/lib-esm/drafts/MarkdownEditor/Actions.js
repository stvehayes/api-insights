import React, { forwardRef, useContext } from 'react';
import '../../Box/Box.js';
import '@styled-system/css';
import 'deepmerge';
import '../../ThemeProvider.js';
import '../../Button/types.js';
import '../../utils/defaultSxProp.js';
import '../../CounterLabel/CounterLabel.js';
import { ButtonComponent } from '../../Button/Button.js';
import { MarkdownEditorContext } from './_MarkdownEditorContext.js';

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const Actions = ({
  children
}) => /*#__PURE__*/React.createElement(React.Fragment, null, children);
Actions.displayName = 'MarkdownEditor.Actions';
const ActionButton = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    disabled
  } = useContext(MarkdownEditorContext);
  return /*#__PURE__*/React.createElement(ButtonComponent, _extends({
    ref: ref,
    disabled: disabled
  }, props));
});
ActionButton.displayName = 'MarkdownEditor.ActionButton';

export { ActionButton, Actions };
