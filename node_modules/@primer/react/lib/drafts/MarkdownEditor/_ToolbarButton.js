'use strict';

var React = require('react');
var IconButton = require('../../Button/IconButton.js');
require('../../Box/Box.js');
require('@styled-system/css');
require('deepmerge');
require('../../ThemeProvider.js');
require('../../Button/types.js');
require('../../utils/defaultSxProp.js');
require('../../CounterLabel/CounterLabel.js');
require('../../Button/Button.js');
var _MarkdownEditorContext = require('./_MarkdownEditorContext.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const ToolbarButton = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    disabled,
    condensed
  } = React.useContext(_MarkdownEditorContext.MarkdownEditorContext);
  return /*#__PURE__*/React__default.default.createElement(IconButton.IconButton, _extends({
    ref: ref,
    size: condensed ? 'small' : 'medium',
    variant: "invisible",
    disabled: disabled
    // Prevent focus leaving input:
    ,
    onMouseDown: e => e.preventDefault()
  }, props, {
    sx: {
      color: 'fg.muted',
      ...props.sx
    }
  }));
});
ToolbarButton.displayName = 'MarkdownEditor.ToolbarButton';

exports.ToolbarButton = ToolbarButton;
