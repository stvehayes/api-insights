{"ast":null,"code":"import { useState, useRef, useEffect, useCallback } from 'react';\nimport { useUnifiedFileSelect } from '../hooks/useUnifiedFileSelect.js';\nimport { useSafeAsyncCallback } from '../hooks/useSafeAsyncCallback.js';\nimport { markdownComment, markdownImage, markdownLink } from './utils.js';\nconst placeholder = file => markdownComment(`Uploading \"${file.name}\"...`);\nconst markdown = (file, url) => {\n  if (!url) return markdownComment(`Failed to upload \"${file.name}\"`);\n  if (file.type.startsWith('video/')) return url;\n  if (file.type.startsWith('image/')) return markdownImage('Image', url);\n  return markdownLink(file.name, url);\n};\nconst noop = () => {\n  /*noop*/\n};\nconst useFileHandling = ({\n  emitChange,\n  value,\n  inputRef,\n  disabled,\n  onUploadFile,\n  acceptedFileTypes\n}) => {\n  const [errorMessage, setErrorMessage] = useState(undefined);\n  const errorVisibleForEnoughTime = useRef(false);\n  useEffect(() => {\n    if (errorMessage) {\n      errorVisibleForEnoughTime.current = false;\n      const id = setTimeout(() => errorVisibleForEnoughTime.current = true, 1000);\n      return () => clearTimeout(id);\n    }\n  }, [errorMessage]);\n  useEffect(() => {\n    // clears the error message when the user types and enough time has passed\n    if (errorVisibleForEnoughTime.current) setErrorMessage(undefined);\n  }, [value]);\n  const safeSetRejectedFiles = useSafeAsyncCallback(files => {\n    const types = new Set(files.map(({\n      name\n    }) => {\n      const parts = name.split('.');\n      return parts.length > 1 ? `.${parts.at(-1)}` : '';\n    }).filter(s => s !== ''));\n    if (types.size > 0) setErrorMessage(`File type${types.size > 1 ? 's' : ''} not allowed: ${[...types].join(', ')}`);\n  });\n  const [uploadProgress, setUploadProgress] = useState(undefined);\n  const safeClearUploadProgress = useSafeAsyncCallback(() => setUploadProgress(undefined));\n  const insertPlaceholder = useCallback(files => {\n    if (!inputRef.current) return;\n    const placeholders = `\\n\\n${files.map(placeholder).join('\\n')}\\n\\n`;\n    emitChange(placeholders);\n  }, [inputRef, emitChange]);\n  const replacePlaceholderWithMarkdown = (file, url) => {\n    if (!inputRef.current) return;\n    const placeholderStr = placeholder(file);\n    const placeholderIndex = inputRef.current.value.indexOf(placeholderStr);\n    if (placeholderIndex === -1) return;\n    emitChange(markdown(file, url), [placeholderIndex, placeholderIndex + placeholderStr.length]);\n  };\n\n  // It's crucial that this is done safely because file uploads can take a long time - there's\n  // a very good chance that the references will be outdated or the component unmounted by the time this is called.\n  const safeHandleCompletedFileUpload = useSafeAsyncCallback(({\n    file,\n    url\n  }) => {\n    setUploadProgress(progress => progress && [progress[0] + 1, progress[1]]);\n    replacePlaceholderWithMarkdown(file, url);\n  });\n  const uploadFiles = useCallback(files => files.map(async file => {\n    let result = {\n      url: null,\n      file\n    };\n    try {\n      var _await$onUploadFile;\n      result = (_await$onUploadFile = await (onUploadFile === null || onUploadFile === void 0 ? void 0 : onUploadFile(file))) !== null && _await$onUploadFile !== void 0 ? _await$onUploadFile : {\n        file,\n        url: null\n      };\n    } catch (e) {\n      result = {\n        file,\n        url: null\n      };\n    }\n    safeHandleCompletedFileUpload(result);\n  }), [onUploadFile, safeHandleCompletedFileUpload]);\n  const onSelectFiles = useCallback(async (accepted, rejected) => {\n    if (accepted.length > 0) {\n      setUploadProgress([1, accepted.length]);\n      insertPlaceholder(accepted);\n      await Promise.all(uploadFiles(accepted));\n      safeClearUploadProgress();\n    }\n    // setting rejected files will hide upload progress, replacing it with an error message\n    // so only call it after successful files are uploaded\n    safeSetRejectedFiles(rejected);\n  }, [safeSetRejectedFiles, insertPlaceholder, uploadFiles, safeClearUploadProgress]);\n  let fileSelect = useUnifiedFileSelect({\n    acceptedFileTypes,\n    multi: true,\n    onSelect: onSelectFiles\n  });\n  if (disabled) {\n    fileSelect = {\n      clickTargetProps: {\n        onClick: noop\n      },\n      dropTargetProps: {\n        onDragEnter: noop,\n        onDragLeave: noop,\n        onDrop: noop,\n        onDragOver: noop\n      },\n      pasteTargetProps: {\n        onPaste: noop\n      },\n      isDraggedOver: false\n    };\n  }\n  return onUploadFile ? {\n    ...fileSelect,\n    errorMessage,\n    uploadProgress\n  } : null;\n};\nexport { useFileHandling };","map":{"version":3,"names":["useState","useRef","useEffect","useCallback","useUnifiedFileSelect","useSafeAsyncCallback","markdownComment","markdownImage","markdownLink","placeholder","file","name","markdown","url","type","startsWith","noop","useFileHandling","emitChange","value","inputRef","disabled","onUploadFile","acceptedFileTypes","errorMessage","setErrorMessage","undefined","errorVisibleForEnoughTime","current","id","setTimeout","clearTimeout","safeSetRejectedFiles","files","types","Set","map","parts","split","length","at","filter","s","size","join","uploadProgress","setUploadProgress","safeClearUploadProgress","insertPlaceholder","placeholders","replacePlaceholderWithMarkdown","placeholderStr","placeholderIndex","indexOf","safeHandleCompletedFileUpload","progress","uploadFiles","result","_await$onUploadFile","e","onSelectFiles","accepted","rejected","Promise","all","fileSelect","multi","onSelect","clickTargetProps","onClick","dropTargetProps","onDragEnter","onDragLeave","onDrop","onDragOver","pasteTargetProps","onPaste","isDraggedOver"],"sources":["/Users/steve/Documents/repos/github/api-insights/node_modules/@primer/react/lib-esm/drafts/MarkdownEditor/_useFileHandling.js"],"sourcesContent":["import { useState, useRef, useEffect, useCallback } from 'react';\nimport { useUnifiedFileSelect } from '../hooks/useUnifiedFileSelect.js';\nimport { useSafeAsyncCallback } from '../hooks/useSafeAsyncCallback.js';\nimport { markdownComment, markdownImage, markdownLink } from './utils.js';\n\nconst placeholder = file => markdownComment(`Uploading \"${file.name}\"...`);\nconst markdown = (file, url) => {\n  if (!url) return markdownComment(`Failed to upload \"${file.name}\"`);\n  if (file.type.startsWith('video/')) return url;\n  if (file.type.startsWith('image/')) return markdownImage('Image', url);\n  return markdownLink(file.name, url);\n};\nconst noop = () => {\n  /*noop*/\n};\nconst useFileHandling = ({\n  emitChange,\n  value,\n  inputRef,\n  disabled,\n  onUploadFile,\n  acceptedFileTypes\n}) => {\n  const [errorMessage, setErrorMessage] = useState(undefined);\n  const errorVisibleForEnoughTime = useRef(false);\n  useEffect(() => {\n    if (errorMessage) {\n      errorVisibleForEnoughTime.current = false;\n      const id = setTimeout(() => errorVisibleForEnoughTime.current = true, 1000);\n      return () => clearTimeout(id);\n    }\n  }, [errorMessage]);\n  useEffect(() => {\n    // clears the error message when the user types and enough time has passed\n    if (errorVisibleForEnoughTime.current) setErrorMessage(undefined);\n  }, [value]);\n  const safeSetRejectedFiles = useSafeAsyncCallback(files => {\n    const types = new Set(files.map(({\n      name\n    }) => {\n      const parts = name.split('.');\n      return parts.length > 1 ? `.${parts.at(-1)}` : '';\n    }).filter(s => s !== ''));\n    if (types.size > 0) setErrorMessage(`File type${types.size > 1 ? 's' : ''} not allowed: ${[...types].join(', ')}`);\n  });\n  const [uploadProgress, setUploadProgress] = useState(undefined);\n  const safeClearUploadProgress = useSafeAsyncCallback(() => setUploadProgress(undefined));\n  const insertPlaceholder = useCallback(files => {\n    if (!inputRef.current) return;\n    const placeholders = `\\n\\n${files.map(placeholder).join('\\n')}\\n\\n`;\n    emitChange(placeholders);\n  }, [inputRef, emitChange]);\n  const replacePlaceholderWithMarkdown = (file, url) => {\n    if (!inputRef.current) return;\n    const placeholderStr = placeholder(file);\n    const placeholderIndex = inputRef.current.value.indexOf(placeholderStr);\n    if (placeholderIndex === -1) return;\n    emitChange(markdown(file, url), [placeholderIndex, placeholderIndex + placeholderStr.length]);\n  };\n\n  // It's crucial that this is done safely because file uploads can take a long time - there's\n  // a very good chance that the references will be outdated or the component unmounted by the time this is called.\n  const safeHandleCompletedFileUpload = useSafeAsyncCallback(({\n    file,\n    url\n  }) => {\n    setUploadProgress(progress => progress && [progress[0] + 1, progress[1]]);\n    replacePlaceholderWithMarkdown(file, url);\n  });\n  const uploadFiles = useCallback(files => files.map(async file => {\n    let result = {\n      url: null,\n      file\n    };\n    try {\n      var _await$onUploadFile;\n      result = (_await$onUploadFile = await (onUploadFile === null || onUploadFile === void 0 ? void 0 : onUploadFile(file))) !== null && _await$onUploadFile !== void 0 ? _await$onUploadFile : {\n        file,\n        url: null\n      };\n    } catch (e) {\n      result = {\n        file,\n        url: null\n      };\n    }\n    safeHandleCompletedFileUpload(result);\n  }), [onUploadFile, safeHandleCompletedFileUpload]);\n  const onSelectFiles = useCallback(async (accepted, rejected) => {\n    if (accepted.length > 0) {\n      setUploadProgress([1, accepted.length]);\n      insertPlaceholder(accepted);\n      await Promise.all(uploadFiles(accepted));\n      safeClearUploadProgress();\n    }\n    // setting rejected files will hide upload progress, replacing it with an error message\n    // so only call it after successful files are uploaded\n    safeSetRejectedFiles(rejected);\n  }, [safeSetRejectedFiles, insertPlaceholder, uploadFiles, safeClearUploadProgress]);\n  let fileSelect = useUnifiedFileSelect({\n    acceptedFileTypes,\n    multi: true,\n    onSelect: onSelectFiles\n  });\n  if (disabled) {\n    fileSelect = {\n      clickTargetProps: {\n        onClick: noop\n      },\n      dropTargetProps: {\n        onDragEnter: noop,\n        onDragLeave: noop,\n        onDrop: noop,\n        onDragOver: noop\n      },\n      pasteTargetProps: {\n        onPaste: noop\n      },\n      isDraggedOver: false\n    };\n  }\n  return onUploadFile ? {\n    ...fileSelect,\n    errorMessage,\n    uploadProgress\n  } : null;\n};\n\nexport { useFileHandling };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}