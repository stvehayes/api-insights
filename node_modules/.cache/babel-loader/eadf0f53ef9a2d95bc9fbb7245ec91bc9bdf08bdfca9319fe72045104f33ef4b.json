{"ast":null,"code":"import { isResponsiveValue } from '../hooks/useResponsiveValue.js';\nimport { mediaQueries } from './layout.js';\nfunction areAllValuesTheSame(responsiveValue) {\n  if ('narrow' in responsiveValue && 'regular' in responsiveValue && 'wide' in responsiveValue) {\n    const values = Object.values(responsiveValue);\n    return values.every(value => value === values[0]);\n  }\n  return false;\n}\nfunction haveRegularAndWideSameValue(responsiveValue) {\n  if ('regular' in responsiveValue && 'wide' in responsiveValue) {\n    return responsiveValue.regular === responsiveValue.wide;\n  }\n  return false;\n}\n\n/**\n * This function is inspired by the `useResponsiveValue` hook and it's used to render responsive values with CSS.\n * @param value - The value that needs to be rendered responsively\n * @param cssProperty - The CSS property whoes value needs to be rendered responsively\n * @param mapFn - A function that maps the given value to a CSS value\n *\n * If the value is responsive, it will only return the given viewports' breakpoints as CSS rules \n * with the given CSS property and their mapped value. For viewports that are not specified, \n * we need to provide a fallback CSS declaration in the component's sx prop along with the styles\n * that will return from this function.\n * \n * @example\n * getBreakpointDeclarations({narrow: true, regular: true, wide: false}, 'display', value => {\n      return value ? 'none' : 'flex'\n    })\n * @returns\n * {\n *   \"@media screen and (max-width: 768px)\": {\n *     \"display\": \"none\"\n *   },\n *   \"@media screen and (min-width: 768px)\": {\n *     \"display\": \"none\"\n *   },\n *   \"@media screen and (min-width: 1440px)\": {\n *     \"display\": \"flex\"\n *   }\n * }\n * \n * * @example\n * getBreakpointDeclarations({regular: 'border.default', wide: 'canvas.inset'}, 'backgroundColor', (value): string => {\n    return value\n  })\n * @returns\n * {\n *   \"@media screen and (min-width: 768px)\": {\n *     \"backgroundColor\": \"border.default\"\n *   },\n *   \"@media screen and (min-width: 1440px)\": {\n *     \"backgroundColor\": \"canvas.inset\"\n *   }\n * }\n * \n * * @example\n* getBreakpointDeclarations({narrow: 'filled', regular: 'line'}, 'height', (value): string => {\n    return {\n      filled: 8,\n      line: 1,\n    }[value]\n  })\n * @returns\n * {\n *  \"@media screen and (max-width: 768px)\": {\n *     \"height\": 8\n *   }\n *   \"@media screen and (min-width: 768px)\": {\n *     \"height\": 1\n *   },\n * }\n * \n * If multiple CSS properties need to be rendered responsively in the same CSS rule, this function \n * can be called multiple times but make sure to deep merge the CSS declaration objects returned from this function. \n * \n * * @example\n * const mediaQueryStyles = merge<BetterSystemStyleObject>(\n    getBreakpointDeclarations(hidden, 'display', value => {\n      return value ? 'none' : 'flex'\n    }),\n    getBreakpointDeclarations(\n      {\n        narrow: 'none',\n        regular: 'line',\n        wide: 'filled',\n      },\n      'backgroundColor',\n      (value): string => {\n        return {\n          none: 'pink',\n          line: 'salmon',\n          filled: 'blue',\n        }[value]\n      },\n    ),\n  )\n */\nfunction getBreakpointDeclarations(value, cssProperty, mapFn) {\n  if (isResponsiveValue(value)) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const responsiveValue = value;\n\n    // Build media queries with the giving cssProperty and mapFn\n    const narrowMediaQuery = 'narrow' in responsiveValue ? {\n      [mediaQueries.narrow]: {\n        [cssProperty]: mapFn(responsiveValue.narrow)\n      }\n    } : {};\n    const regularMediaQuery = 'regular' in responsiveValue ? {\n      [mediaQueries.regular]: {\n        [cssProperty]: mapFn(responsiveValue.regular)\n      }\n    } : {};\n    const wideMediaQuery = 'wide' in responsiveValue ? {\n      [mediaQueries.wide]: {\n        [cssProperty]: mapFn(responsiveValue.wide)\n      }\n    } : {};\n\n    // check if all values are the same - this is not a recommended practise but we still should check for it\n    if (areAllValuesTheSame(responsiveValue)) {\n      // if all the values are the same, we can just use one of the value to determine the CSS property's value\n      return {\n        [cssProperty]: mapFn(responsiveValue.narrow)\n      };\n      // check if regular and wide have the same value, if so we can just return the narrow and regular media queries\n    } else if (haveRegularAndWideSameValue(responsiveValue)) {\n      return {\n        ...narrowMediaQuery,\n        ...regularMediaQuery\n      };\n    } else {\n      return {\n        ...narrowMediaQuery,\n        ...regularMediaQuery,\n        ...wideMediaQuery\n      };\n    }\n  } else {\n    // If the given value is not a responsive value\n    return {\n      [cssProperty]: mapFn(value)\n    };\n  }\n}\nexport { getBreakpointDeclarations };","map":{"version":3,"names":["isResponsiveValue","mediaQueries","areAllValuesTheSame","responsiveValue","values","Object","every","value","haveRegularAndWideSameValue","regular","wide","getBreakpointDeclarations","cssProperty","mapFn","narrowMediaQuery","narrow","regularMediaQuery","wideMediaQuery"],"sources":["/Users/steve/Documents/repos/github/billing-usage/node_modules/@primer/react/lib-esm/utils/getBreakpointDeclarations.js"],"sourcesContent":["import { isResponsiveValue } from '../hooks/useResponsiveValue.js';\nimport { mediaQueries } from './layout.js';\n\nfunction areAllValuesTheSame(responsiveValue) {\n  if ('narrow' in responsiveValue && 'regular' in responsiveValue && 'wide' in responsiveValue) {\n    const values = Object.values(responsiveValue);\n    return values.every(value => value === values[0]);\n  }\n  return false;\n}\nfunction haveRegularAndWideSameValue(responsiveValue) {\n  if ('regular' in responsiveValue && 'wide' in responsiveValue) {\n    return responsiveValue.regular === responsiveValue.wide;\n  }\n  return false;\n}\n\n/**\n * This function is inspired by the `useResponsiveValue` hook and it's used to render responsive values with CSS.\n * @param value - The value that needs to be rendered responsively\n * @param cssProperty - The CSS property whoes value needs to be rendered responsively\n * @param mapFn - A function that maps the given value to a CSS value\n *\n * If the value is responsive, it will only return the given viewports' breakpoints as CSS rules \n * with the given CSS property and their mapped value. For viewports that are not specified, \n * we need to provide a fallback CSS declaration in the component's sx prop along with the styles\n * that will return from this function.\n * \n * @example\n * getBreakpointDeclarations({narrow: true, regular: true, wide: false}, 'display', value => {\n      return value ? 'none' : 'flex'\n    })\n * @returns\n * {\n *   \"@media screen and (max-width: 768px)\": {\n *     \"display\": \"none\"\n *   },\n *   \"@media screen and (min-width: 768px)\": {\n *     \"display\": \"none\"\n *   },\n *   \"@media screen and (min-width: 1440px)\": {\n *     \"display\": \"flex\"\n *   }\n * }\n * \n * * @example\n * getBreakpointDeclarations({regular: 'border.default', wide: 'canvas.inset'}, 'backgroundColor', (value): string => {\n    return value\n  })\n * @returns\n * {\n *   \"@media screen and (min-width: 768px)\": {\n *     \"backgroundColor\": \"border.default\"\n *   },\n *   \"@media screen and (min-width: 1440px)\": {\n *     \"backgroundColor\": \"canvas.inset\"\n *   }\n * }\n * \n * * @example\n* getBreakpointDeclarations({narrow: 'filled', regular: 'line'}, 'height', (value): string => {\n    return {\n      filled: 8,\n      line: 1,\n    }[value]\n  })\n * @returns\n * {\n *  \"@media screen and (max-width: 768px)\": {\n *     \"height\": 8\n *   }\n *   \"@media screen and (min-width: 768px)\": {\n *     \"height\": 1\n *   },\n * }\n * \n * If multiple CSS properties need to be rendered responsively in the same CSS rule, this function \n * can be called multiple times but make sure to deep merge the CSS declaration objects returned from this function. \n * \n * * @example\n * const mediaQueryStyles = merge<BetterSystemStyleObject>(\n    getBreakpointDeclarations(hidden, 'display', value => {\n      return value ? 'none' : 'flex'\n    }),\n    getBreakpointDeclarations(\n      {\n        narrow: 'none',\n        regular: 'line',\n        wide: 'filled',\n      },\n      'backgroundColor',\n      (value): string => {\n        return {\n          none: 'pink',\n          line: 'salmon',\n          filled: 'blue',\n        }[value]\n      },\n    ),\n  )\n */\nfunction getBreakpointDeclarations(value, cssProperty, mapFn) {\n  if (isResponsiveValue(value)) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const responsiveValue = value;\n\n    // Build media queries with the giving cssProperty and mapFn\n    const narrowMediaQuery = 'narrow' in responsiveValue ? {\n      [mediaQueries.narrow]: {\n        [cssProperty]: mapFn(responsiveValue.narrow)\n      }\n    } : {};\n    const regularMediaQuery = 'regular' in responsiveValue ? {\n      [mediaQueries.regular]: {\n        [cssProperty]: mapFn(responsiveValue.regular)\n      }\n    } : {};\n    const wideMediaQuery = 'wide' in responsiveValue ? {\n      [mediaQueries.wide]: {\n        [cssProperty]: mapFn(responsiveValue.wide)\n      }\n    } : {};\n\n    // check if all values are the same - this is not a recommended practise but we still should check for it\n    if (areAllValuesTheSame(responsiveValue)) {\n      // if all the values are the same, we can just use one of the value to determine the CSS property's value\n      return {\n        [cssProperty]: mapFn(responsiveValue.narrow)\n      };\n      // check if regular and wide have the same value, if so we can just return the narrow and regular media queries\n    } else if (haveRegularAndWideSameValue(responsiveValue)) {\n      return {\n        ...narrowMediaQuery,\n        ...regularMediaQuery\n      };\n    } else {\n      return {\n        ...narrowMediaQuery,\n        ...regularMediaQuery,\n        ...wideMediaQuery\n      };\n    }\n  } else {\n    // If the given value is not a responsive value\n    return {\n      [cssProperty]: mapFn(value)\n    };\n  }\n}\n\nexport { getBreakpointDeclarations };\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,YAAY,QAAQ,aAAa;AAE1C,SAASC,mBAAmBA,CAACC,eAAe,EAAE;EAC5C,IAAI,QAAQ,IAAIA,eAAe,IAAI,SAAS,IAAIA,eAAe,IAAI,MAAM,IAAIA,eAAe,EAAE;IAC5F,MAAMC,MAAM,GAAGC,MAAM,CAACD,MAAM,CAACD,eAAe,CAAC;IAC7C,OAAOC,MAAM,CAACE,KAAK,CAACC,KAAK,IAAIA,KAAK,KAAKH,MAAM,CAAC,CAAC,CAAC,CAAC;EACnD;EACA,OAAO,KAAK;AACd;AACA,SAASI,2BAA2BA,CAACL,eAAe,EAAE;EACpD,IAAI,SAAS,IAAIA,eAAe,IAAI,MAAM,IAAIA,eAAe,EAAE;IAC7D,OAAOA,eAAe,CAACM,OAAO,KAAKN,eAAe,CAACO,IAAI;EACzD;EACA,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,yBAAyBA,CAACJ,KAAK,EAAEK,WAAW,EAAEC,KAAK,EAAE;EAC5D,IAAIb,iBAAiB,CAACO,KAAK,CAAC,EAAE;IAC5B;IACA,MAAMJ,eAAe,GAAGI,KAAK;;IAE7B;IACA,MAAMO,gBAAgB,GAAG,QAAQ,IAAIX,eAAe,GAAG;MACrD,CAACF,YAAY,CAACc,MAAM,GAAG;QACrB,CAACH,WAAW,GAAGC,KAAK,CAACV,eAAe,CAACY,MAAM;MAC7C;IACF,CAAC,GAAG,CAAC,CAAC;IACN,MAAMC,iBAAiB,GAAG,SAAS,IAAIb,eAAe,GAAG;MACvD,CAACF,YAAY,CAACQ,OAAO,GAAG;QACtB,CAACG,WAAW,GAAGC,KAAK,CAACV,eAAe,CAACM,OAAO;MAC9C;IACF,CAAC,GAAG,CAAC,CAAC;IACN,MAAMQ,cAAc,GAAG,MAAM,IAAId,eAAe,GAAG;MACjD,CAACF,YAAY,CAACS,IAAI,GAAG;QACnB,CAACE,WAAW,GAAGC,KAAK,CAACV,eAAe,CAACO,IAAI;MAC3C;IACF,CAAC,GAAG,CAAC,CAAC;;IAEN;IACA,IAAIR,mBAAmB,CAACC,eAAe,CAAC,EAAE;MACxC;MACA,OAAO;QACL,CAACS,WAAW,GAAGC,KAAK,CAACV,eAAe,CAACY,MAAM;MAC7C,CAAC;MACD;IACF,CAAC,MAAM,IAAIP,2BAA2B,CAACL,eAAe,CAAC,EAAE;MACvD,OAAO;QACL,GAAGW,gBAAgB;QACnB,GAAGE;MACL,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACL,GAAGF,gBAAgB;QACnB,GAAGE,iBAAiB;QACpB,GAAGC;MACL,CAAC;IACH;EACF,CAAC,MAAM;IACL;IACA,OAAO;MACL,CAACL,WAAW,GAAGC,KAAK,CAACN,KAAK;IAC5B,CAAC;EACH;AACF;AAEA,SAASI,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}