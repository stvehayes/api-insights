{"ast":null,"code":"import { useRef, useCallback, useState, useEffect } from 'react';\nimport useIsomorphicLayoutEffect from '../../utils/useIsomorphicLayoutEffect.js';\nimport { listItemToString, parseListItem } from '../MarkdownEditor/_useListEditing.js';\n\n// Make check for code fences more robust per spec: https://github.github.com/gfm/#fenced-code-blocks\nconst parseCodeFenceBegin = line => {\n  const match = line.match(/^ {0,3}(`{3,}|~{3,})[^`]*$/);\n  return match ? match[1] : null;\n};\nconst isCodeFenceEnd = (line, fence) => {\n  const regex = new RegExp(`^ {0,3}${fence}${fence[0]}* *$`);\n  return regex.test(line);\n};\nconst isTaskListItem = item => typeof (item === null || item === void 0 ? void 0 : item.taskBox) === 'string';\nconst toggleTaskListItem = item => ({\n  ...item,\n  taskBox: item.taskBox === '[ ]' ? '[x]' : '[ ]'\n});\n/**\n * Adds support for list interaction to rendered Markdown.\n *\n * Currently only supports checking / unchecking list items - reordering and task-item to\n * issue conversion are not supported yet.\n */\nconst useListInteraction = ({\n  htmlContainer,\n  markdownValue,\n  onChange,\n  disabled = false,\n  dependencies = []\n}) => {\n  // Storing the value in a ref allows not using the markdown value as a depdency of\n  // onToggleItem, which would mean we'd have to re-bind the event handlers on every change\n  const markdownRef = useRef(markdownValue);\n  useIsomorphicLayoutEffect(() => {\n    markdownRef.current = markdownValue;\n  }, [markdownValue]);\n  const onToggleItem = useCallback(toggledItemIndex => () => {\n    const lines = markdownRef.current.split(/\\r?\\n/);\n    let currentCodeFence = null;\n    for (let lineIndex = 0, taskIndex = 0; lineIndex < lines.length; lineIndex++) {\n      const line = lines[lineIndex];\n      if (!currentCodeFence) {\n        currentCodeFence = parseCodeFenceBegin(line);\n      } else if (isCodeFenceEnd(line, currentCodeFence)) {\n        currentCodeFence = null;\n        continue;\n      }\n      if (currentCodeFence) continue;\n      const parsedLine = parseListItem(line);\n      if (!isTaskListItem(parsedLine)) continue;\n      if (taskIndex === toggledItemIndex) {\n        const updatedLine = listItemToString(toggleTaskListItem(parsedLine));\n        lines.splice(lineIndex, 1, updatedLine);\n        const updatedMarkdown = lines.join('\\n');\n        markdownRef.current = updatedMarkdown;\n        onChange(updatedMarkdown);\n        return;\n      }\n      taskIndex++;\n    }\n  }, [onChange]);\n  const [checkboxElements, setCheckboxElements] = useState([]);\n  useEffect(() => {\n    var _htmlContainer$queryS;\n    setCheckboxElements(Array.from((_htmlContainer$queryS = htmlContainer === null || htmlContainer === void 0 ? void 0 : htmlContainer.querySelectorAll('input[type=checkbox].task-list-item-checkbox')) !== null && _htmlContainer$queryS !== void 0 ? _htmlContainer$queryS : []));\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [htmlContainer, ...dependencies]);\n\n  // This could be combined with the other effect, but then the checkboxes might have a flicker\n  // of being disabled between cleanup & setup\n  useEffect(function enableOrDisableCheckboxes() {\n    const cleanupFns = checkboxElements.map(el => {\n      const previouslyDisabled = el.disabled;\n      el.disabled = disabled;\n      return () => {\n        el.disabled = previouslyDisabled;\n      };\n    });\n\n    // eslint-disable-next-line github/array-foreach\n    return () => cleanupFns.forEach(fn => fn());\n  }, [checkboxElements, disabled]);\n  useEffect(function bindEventListeners() {\n    const cleanupFns = checkboxElements.map((el, i) => {\n      const toggleHandler = onToggleItem(i);\n      el.addEventListener('change', toggleHandler);\n      return () => el.removeEventListener('change', toggleHandler);\n    });\n\n    // eslint-disable-next-line github/array-foreach\n    return () => cleanupFns.forEach(fn => fn());\n  }, [checkboxElements, onToggleItem]);\n};\nexport { isCodeFenceEnd, isTaskListItem, parseCodeFenceBegin, useListInteraction };","map":{"version":3,"names":["useRef","useCallback","useState","useEffect","useIsomorphicLayoutEffect","listItemToString","parseListItem","parseCodeFenceBegin","line","match","isCodeFenceEnd","fence","regex","RegExp","test","isTaskListItem","item","taskBox","toggleTaskListItem","useListInteraction","htmlContainer","markdownValue","onChange","disabled","dependencies","markdownRef","current","onToggleItem","toggledItemIndex","lines","split","currentCodeFence","lineIndex","taskIndex","length","parsedLine","updatedLine","splice","updatedMarkdown","join","checkboxElements","setCheckboxElements","_htmlContainer$queryS","Array","from","querySelectorAll","enableOrDisableCheckboxes","cleanupFns","map","el","previouslyDisabled","forEach","fn","bindEventListeners","i","toggleHandler","addEventListener","removeEventListener"],"sources":["/Users/steve/Documents/repos/github/api-insights/node_modules/@primer/react/lib-esm/drafts/MarkdownViewer/_useListInteraction.js"],"sourcesContent":["import { useRef, useCallback, useState, useEffect } from 'react';\nimport useIsomorphicLayoutEffect from '../../utils/useIsomorphicLayoutEffect.js';\nimport { listItemToString, parseListItem } from '../MarkdownEditor/_useListEditing.js';\n\n// Make check for code fences more robust per spec: https://github.github.com/gfm/#fenced-code-blocks\nconst parseCodeFenceBegin = line => {\n  const match = line.match(/^ {0,3}(`{3,}|~{3,})[^`]*$/);\n  return match ? match[1] : null;\n};\nconst isCodeFenceEnd = (line, fence) => {\n  const regex = new RegExp(`^ {0,3}${fence}${fence[0]}* *$`);\n  return regex.test(line);\n};\nconst isTaskListItem = item => typeof (item === null || item === void 0 ? void 0 : item.taskBox) === 'string';\nconst toggleTaskListItem = item => ({\n  ...item,\n  taskBox: item.taskBox === '[ ]' ? '[x]' : '[ ]'\n});\n/**\n * Adds support for list interaction to rendered Markdown.\n *\n * Currently only supports checking / unchecking list items - reordering and task-item to\n * issue conversion are not supported yet.\n */\nconst useListInteraction = ({\n  htmlContainer,\n  markdownValue,\n  onChange,\n  disabled = false,\n  dependencies = []\n}) => {\n  // Storing the value in a ref allows not using the markdown value as a depdency of\n  // onToggleItem, which would mean we'd have to re-bind the event handlers on every change\n  const markdownRef = useRef(markdownValue);\n  useIsomorphicLayoutEffect(() => {\n    markdownRef.current = markdownValue;\n  }, [markdownValue]);\n  const onToggleItem = useCallback(toggledItemIndex => () => {\n    const lines = markdownRef.current.split(/\\r?\\n/);\n    let currentCodeFence = null;\n    for (let lineIndex = 0, taskIndex = 0; lineIndex < lines.length; lineIndex++) {\n      const line = lines[lineIndex];\n      if (!currentCodeFence) {\n        currentCodeFence = parseCodeFenceBegin(line);\n      } else if (isCodeFenceEnd(line, currentCodeFence)) {\n        currentCodeFence = null;\n        continue;\n      }\n      if (currentCodeFence) continue;\n      const parsedLine = parseListItem(line);\n      if (!isTaskListItem(parsedLine)) continue;\n      if (taskIndex === toggledItemIndex) {\n        const updatedLine = listItemToString(toggleTaskListItem(parsedLine));\n        lines.splice(lineIndex, 1, updatedLine);\n        const updatedMarkdown = lines.join('\\n');\n        markdownRef.current = updatedMarkdown;\n        onChange(updatedMarkdown);\n        return;\n      }\n      taskIndex++;\n    }\n  }, [onChange]);\n  const [checkboxElements, setCheckboxElements] = useState([]);\n  useEffect(() => {\n    var _htmlContainer$queryS;\n    setCheckboxElements(Array.from((_htmlContainer$queryS = htmlContainer === null || htmlContainer === void 0 ? void 0 : htmlContainer.querySelectorAll('input[type=checkbox].task-list-item-checkbox')) !== null && _htmlContainer$queryS !== void 0 ? _htmlContainer$queryS : []));\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [htmlContainer, ...dependencies]);\n\n  // This could be combined with the other effect, but then the checkboxes might have a flicker\n  // of being disabled between cleanup & setup\n  useEffect(function enableOrDisableCheckboxes() {\n    const cleanupFns = checkboxElements.map(el => {\n      const previouslyDisabled = el.disabled;\n      el.disabled = disabled;\n      return () => {\n        el.disabled = previouslyDisabled;\n      };\n    });\n\n    // eslint-disable-next-line github/array-foreach\n    return () => cleanupFns.forEach(fn => fn());\n  }, [checkboxElements, disabled]);\n  useEffect(function bindEventListeners() {\n    const cleanupFns = checkboxElements.map((el, i) => {\n      const toggleHandler = onToggleItem(i);\n      el.addEventListener('change', toggleHandler);\n      return () => el.removeEventListener('change', toggleHandler);\n    });\n\n    // eslint-disable-next-line github/array-foreach\n    return () => cleanupFns.forEach(fn => fn());\n  }, [checkboxElements, onToggleItem]);\n};\n\nexport { isCodeFenceEnd, isTaskListItem, parseCodeFenceBegin, useListInteraction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}