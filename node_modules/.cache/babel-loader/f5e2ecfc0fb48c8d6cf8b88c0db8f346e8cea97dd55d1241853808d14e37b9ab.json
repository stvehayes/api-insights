{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport { ButtonBase } from './ButtonBase.js';\nimport { defaultSxProp } from '../utils/defaultSxProp.js';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nconst ButtonComponent = /*#__PURE__*/forwardRef(({\n  children,\n  sx: sxProp = defaultSxProp,\n  ...props\n}, forwardedRef) => {\n  const {\n    block,\n    size,\n    leadingVisual,\n    trailingVisual,\n    trailingAction\n  } = props;\n  let sxStyles = sxProp;\n  const style = {};\n  if (sxProp !== null && Object.keys(sxProp).length > 0) {\n    sxStyles = generateCustomSxProp({\n      block,\n      size,\n      leadingVisual,\n      trailingVisual,\n      trailingAction\n    }, sxProp);\n\n    // @ts-ignore sxProp can have color attribute\n    const {\n      color\n    } = sxProp;\n    if (color) style['--button-color'] = color;\n  }\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    ref: forwardedRef,\n    as: \"button\",\n    sx: sxStyles,\n    style: style,\n    type: \"button\"\n  }, props), children);\n});\n\n// This function is used to generate a custom cssSelector for the sxProp\n\n// The usual sx prop can like this:\n// sx={{\n//   [`@media (max-width: 768px)`]: {\n//     '& > ul': {\n//       backgroundColor: 'deeppink',\n//     },\n//     '&:hover': {\n//       backgroundColor: 'yellow',\n//     },\n//   },\n//  '&:hover': {\n//     backgroundColor: 'yellow',\n//   },\n//  '&': {\n//  width : 320px\n// }\n// }}\n//*\n/* What we want for Button styles is this:\nsx={{\n//   [`@media (max-width: 768px)`]: {\n//     '&[data-attribute=\"something\"] > ul': {\n//       backgroundColor: 'deeppink',\n//     },\n//     '&[data-attribute=\"something\"]:hover': {\n//       backgroundColor: 'yellow',\n//     },\n//   },\n//  '&[data-attribute=\"something\"]:hover': {\n//     backgroundColor: 'yellow',\n//   },\n//  '&[data-attribute=\"something\"]': {\n//     width : 320px\n//  }\n// }}\n\n// We need to make sure we append the customCSSSelector to the original class selector. i.e & - > &[data-attribute=\"Icon\"][data-size=\"small\"]\n*/\nfunction generateCustomSxProp(props, providedSx) {\n  // Possible data attributes: data-size, data-block, data-no-visuals\n  const size = props.size && props.size !== 'medium' ? `[data-size=\"${props.size}\"]` : ''; // medium is a default size therefore it doesn't have a data attribute that used for styling\n  const block = props.block ? `[data-block=\"block\"]` : '';\n  const noVisuals = props.leadingVisual || props.trailingVisual || props.trailingAction ? '' : '[data-no-visuals]';\n\n  // this is a custom selector. We need to make sure we add the data attributes to the base css class (& -> &[data-attributename=\"value\"]])\n  const cssSelector = `&${size}${block}${noVisuals}`; // &[data-size=\"small\"][data-block=\"block\"][data-no-visuals]\n\n  const customSxProp = {};\n  if (!providedSx) return customSxProp;else {\n    customSxProp[cssSelector] = providedSx;\n    return customSxProp;\n  }\n}\nButtonComponent.displayName = 'Button';\nexport { ButtonComponent, generateCustomSxProp };","map":{"version":3,"names":["React","forwardRef","ButtonBase","defaultSxProp","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","ButtonComponent","children","sx","sxProp","props","forwardedRef","block","size","leadingVisual","trailingVisual","trailingAction","sxStyles","style","keys","generateCustomSxProp","color","createElement","ref","as","type","providedSx","noVisuals","cssSelector","customSxProp","displayName"],"sources":["/Users/steve/Documents/repos/github/api-insights/node_modules/@primer/react/lib-esm/Button/Button.js"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { ButtonBase } from './ButtonBase.js';\nimport { defaultSxProp } from '../utils/defaultSxProp.js';\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nconst ButtonComponent = /*#__PURE__*/forwardRef(({\n  children,\n  sx: sxProp = defaultSxProp,\n  ...props\n}, forwardedRef) => {\n  const {\n    block,\n    size,\n    leadingVisual,\n    trailingVisual,\n    trailingAction\n  } = props;\n  let sxStyles = sxProp;\n  const style = {};\n  if (sxProp !== null && Object.keys(sxProp).length > 0) {\n    sxStyles = generateCustomSxProp({\n      block,\n      size,\n      leadingVisual,\n      trailingVisual,\n      trailingAction\n    }, sxProp);\n\n    // @ts-ignore sxProp can have color attribute\n    const {\n      color\n    } = sxProp;\n    if (color) style['--button-color'] = color;\n  }\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    ref: forwardedRef,\n    as: \"button\",\n    sx: sxStyles,\n    style: style,\n    type: \"button\"\n  }, props), children);\n});\n\n// This function is used to generate a custom cssSelector for the sxProp\n\n// The usual sx prop can like this:\n// sx={{\n//   [`@media (max-width: 768px)`]: {\n//     '& > ul': {\n//       backgroundColor: 'deeppink',\n//     },\n//     '&:hover': {\n//       backgroundColor: 'yellow',\n//     },\n//   },\n//  '&:hover': {\n//     backgroundColor: 'yellow',\n//   },\n//  '&': {\n//  width : 320px\n// }\n// }}\n//*\n/* What we want for Button styles is this:\nsx={{\n//   [`@media (max-width: 768px)`]: {\n//     '&[data-attribute=\"something\"] > ul': {\n//       backgroundColor: 'deeppink',\n//     },\n//     '&[data-attribute=\"something\"]:hover': {\n//       backgroundColor: 'yellow',\n//     },\n//   },\n//  '&[data-attribute=\"something\"]:hover': {\n//     backgroundColor: 'yellow',\n//   },\n//  '&[data-attribute=\"something\"]': {\n//     width : 320px\n//  }\n// }}\n\n// We need to make sure we append the customCSSSelector to the original class selector. i.e & - > &[data-attribute=\"Icon\"][data-size=\"small\"]\n*/\nfunction generateCustomSxProp(props, providedSx) {\n  // Possible data attributes: data-size, data-block, data-no-visuals\n  const size = props.size && props.size !== 'medium' ? `[data-size=\"${props.size}\"]` : ''; // medium is a default size therefore it doesn't have a data attribute that used for styling\n  const block = props.block ? `[data-block=\"block\"]` : '';\n  const noVisuals = props.leadingVisual || props.trailingVisual || props.trailingAction ? '' : '[data-no-visuals]';\n\n  // this is a custom selector. We need to make sure we add the data attributes to the base css class (& -> &[data-attributename=\"value\"]])\n  const cssSelector = `&${size}${block}${noVisuals}`; // &[data-size=\"small\"][data-block=\"block\"][data-no-visuals]\n\n  const customSxProp = {};\n  if (!providedSx) return customSxProp;else {\n    customSxProp[cssSelector] = providedSx;\n    return customSxProp;\n  }\n}\nButtonComponent.displayName = 'Button';\n\nexport { ButtonComponent, generateCustomSxProp };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}