{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { suggestionsCalculator } from './index.js';\nimport { ActionList } from '../../../ActionList/index.js';\nimport Text from '../../../Text/Text.js';\nimport { score } from 'fzy.js';\nconst trigger = {\n  triggerChar: '#',\n  multiWord: true\n};\nconst referenceToSuggestion = reference => ({\n  value: reference.id,\n  render: props => /*#__PURE__*/React.createElement(ActionList.Item, props, reference.iconHtml && /*#__PURE__*/React.createElement(ActionList.LeadingVisual, null, /*#__PURE__*/React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: reference.iconHtml\n    }\n  })), /*#__PURE__*/React.createElement(Text, {\n    sx: {\n      fontWeight: 'bold',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      display: 'block',\n      overflow: 'hidden',\n      maxWidth: 400\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: reference.titleHtml\n    }\n  })), ' ', /*#__PURE__*/React.createElement(ActionList.Description, null, \"#\", reference.id))\n});\nconst scoreSuggestion = (query, reference) => {\n  // fzy unituitively returns Infinity if the length of the item is less than or equal to the length of the query\n  const fzyScore = score(query, `${reference.id} ${reference.titleText}`);\n  // Here, unlike for mentionables, we don't need to check for equality because the user's query\n  // can never equal the search string (we don't do filtering if the query is in \"#123 some text\" form)\n  return fzyScore === Infinity ? -Infinity : fzyScore;\n};\nconst useReferenceSuggestions = references => {\n  const calculateSuggestions = useMemo(() => {\n    const calculator = suggestionsCalculator(references, scoreSuggestion, referenceToSuggestion);\n    return async query => {\n      if (/^\\d+\\s/.test(query)) return []; // don't return anything if the query is in the form #123 ..., assuming they already have the number they want\n      return calculator(query);\n    };\n  }, [references]);\n  return {\n    calculateSuggestions,\n    trigger\n  };\n};\nexport { useReferenceSuggestions };","map":{"version":3,"names":["React","useMemo","suggestionsCalculator","ActionList","Text","score","trigger","triggerChar","multiWord","referenceToSuggestion","reference","value","id","render","props","createElement","Item","iconHtml","LeadingVisual","dangerouslySetInnerHTML","__html","sx","fontWeight","whiteSpace","textOverflow","display","overflow","maxWidth","titleHtml","Description","scoreSuggestion","query","fzyScore","titleText","Infinity","useReferenceSuggestions","references","calculateSuggestions","calculator","test"],"sources":["/Users/steve/Documents/repos/github/api-insights/node_modules/@primer/react/lib-esm/drafts/MarkdownEditor/suggestions/_useReferenceSuggestions.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { suggestionsCalculator } from './index.js';\nimport { ActionList } from '../../../ActionList/index.js';\nimport Text from '../../../Text/Text.js';\nimport { score } from 'fzy.js';\n\nconst trigger = {\n  triggerChar: '#',\n  multiWord: true\n};\nconst referenceToSuggestion = reference => ({\n  value: reference.id,\n  render: props => /*#__PURE__*/React.createElement(ActionList.Item, props, reference.iconHtml && /*#__PURE__*/React.createElement(ActionList.LeadingVisual, null, /*#__PURE__*/React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: reference.iconHtml\n    }\n  })), /*#__PURE__*/React.createElement(Text, {\n    sx: {\n      fontWeight: 'bold',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      display: 'block',\n      overflow: 'hidden',\n      maxWidth: 400\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: reference.titleHtml\n    }\n  })), ' ', /*#__PURE__*/React.createElement(ActionList.Description, null, \"#\", reference.id))\n});\nconst scoreSuggestion = (query, reference) => {\n  // fzy unituitively returns Infinity if the length of the item is less than or equal to the length of the query\n  const fzyScore = score(query, `${reference.id} ${reference.titleText}`);\n  // Here, unlike for mentionables, we don't need to check for equality because the user's query\n  // can never equal the search string (we don't do filtering if the query is in \"#123 some text\" form)\n  return fzyScore === Infinity ? -Infinity : fzyScore;\n};\nconst useReferenceSuggestions = references => {\n  const calculateSuggestions = useMemo(() => {\n    const calculator = suggestionsCalculator(references, scoreSuggestion, referenceToSuggestion);\n    return async query => {\n      if (/^\\d+\\s/.test(query)) return []; // don't return anything if the query is in the form #123 ..., assuming they already have the number they want\n      return calculator(query);\n    };\n  }, [references]);\n  return {\n    calculateSuggestions,\n    trigger\n  };\n};\n\nexport { useReferenceSuggestions };\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,SAASC,qBAAqB,QAAQ,YAAY;AAClD,SAASC,UAAU,QAAQ,8BAA8B;AACzD,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,KAAK,QAAQ,QAAQ;AAE9B,MAAMC,OAAO,GAAG;EACdC,WAAW,EAAE,GAAG;EAChBC,SAAS,EAAE;AACb,CAAC;AACD,MAAMC,qBAAqB,GAAGC,SAAS,KAAK;EAC1CC,KAAK,EAAED,SAAS,CAACE,EAAE;EACnBC,MAAM,EAAEC,KAAK,IAAI,aAAad,KAAK,CAACe,aAAa,CAACZ,UAAU,CAACa,IAAI,EAAEF,KAAK,EAAEJ,SAAS,CAACO,QAAQ,IAAI,aAAajB,KAAK,CAACe,aAAa,CAACZ,UAAU,CAACe,aAAa,EAAE,IAAI,EAAE,aAAalB,KAAK,CAACe,aAAa,CAAC,MAAM,EAAE;IACxMI,uBAAuB,EAAE;MACvBC,MAAM,EAAEV,SAAS,CAACO;IACpB;EACF,CAAC,CAAC,CAAC,EAAE,aAAajB,KAAK,CAACe,aAAa,CAACX,IAAI,EAAE;IAC1CiB,EAAE,EAAE;MACFC,UAAU,EAAE,MAAM;MAClBC,UAAU,EAAE,QAAQ;MACpBC,YAAY,EAAE,UAAU;MACxBC,OAAO,EAAE,OAAO;MAChBC,QAAQ,EAAE,QAAQ;MAClBC,QAAQ,EAAE;IACZ;EACF,CAAC,EAAE,aAAa3B,KAAK,CAACe,aAAa,CAAC,MAAM,EAAE;IAC1CI,uBAAuB,EAAE;MACvBC,MAAM,EAAEV,SAAS,CAACkB;IACpB;EACF,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,aAAa5B,KAAK,CAACe,aAAa,CAACZ,UAAU,CAAC0B,WAAW,EAAE,IAAI,EAAE,GAAG,EAAEnB,SAAS,CAACE,EAAE,CAAC;AAC7F,CAAC,CAAC;AACF,MAAMkB,eAAe,GAAGA,CAACC,KAAK,EAAErB,SAAS,KAAK;EAC5C;EACA,MAAMsB,QAAQ,GAAG3B,KAAK,CAAC0B,KAAK,EAAG,GAAErB,SAAS,CAACE,EAAG,IAAGF,SAAS,CAACuB,SAAU,EAAC,CAAC;EACvE;EACA;EACA,OAAOD,QAAQ,KAAKE,QAAQ,GAAG,CAACA,QAAQ,GAAGF,QAAQ;AACrD,CAAC;AACD,MAAMG,uBAAuB,GAAGC,UAAU,IAAI;EAC5C,MAAMC,oBAAoB,GAAGpC,OAAO,CAAC,MAAM;IACzC,MAAMqC,UAAU,GAAGpC,qBAAqB,CAACkC,UAAU,EAAEN,eAAe,EAAErB,qBAAqB,CAAC;IAC5F,OAAO,MAAMsB,KAAK,IAAI;MACpB,IAAI,QAAQ,CAACQ,IAAI,CAACR,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;MACrC,OAAOO,UAAU,CAACP,KAAK,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACK,UAAU,CAAC,CAAC;EAChB,OAAO;IACLC,oBAAoB;IACpB/B;EACF,CAAC;AACH,CAAC;AAED,SAAS6B,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}