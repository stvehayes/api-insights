{"ast":null,"code":"import { useMemo, useRef, useCallback, useEffect, useState } from 'react';\n\n/** @see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept#unique_file_type_specifiers */\n\n/** Returns a function that can check if a file matches the file type. */\nconst fileTypeMatcher = fileType => {\n  if (fileType.startsWith('.')) {\n    return file => file.name.toLowerCase().endsWith(fileType.toLowerCase());\n  } else {\n    const mimeTypeMatch = fileType.match(mimeTypeRegex);\n    if (mimeTypeMatch === null) return () => false; // invalid FileType matches no files\n\n    const [, targetType, targetSubtype] = mimeTypeMatch;\n    return file => {\n      var _file$type$match;\n      const [, type, subType] = (_file$type$match = file.type.match(mimeTypeRegex)) !== null && _file$type$match !== void 0 ? _file$type$match : [];\n      return targetType.toLowerCase() === type.toLowerCase() && (targetSubtype === '*' || targetSubtype.toLowerCase() === subType.toLowerCase());\n    };\n  }\n};\nfunction useOnSelectFiles(props) {\n  const matchers = useMemo(() => {\n    var _props$acceptedFileTy;\n    return (_props$acceptedFileTy = props.acceptedFileTypes) === null || _props$acceptedFileTy === void 0 ? void 0 : _props$acceptedFileTy.map(fileTypeMatcher);\n  }, [props.acceptedFileTypes]);\n  const isAcceptableFile = useCallback(file => {\n    var _matchers$some;\n    return (_matchers$some = matchers === null || matchers === void 0 ? void 0 : matchers.some(m => m(file))) !== null && _matchers$some !== void 0 ? _matchers$some : true;\n  }, [matchers]);\n  return useCallback(function onSelectFiles(files) {\n    if (files.length === 0) return false;\n    if (props.multi) {\n      // isAcceptableFile is not that fast, so only run once per file\n      const accepted = [];\n      const rejected = [];\n      for (const file of files) isAcceptableFile(file) ? accepted.push(file) : rejected.push(file);\n      props.onSelect(accepted, rejected);\n    } else {\n      const file = files[0];\n      if (isAcceptableFile(file)) props.onSelect(file, undefined);else props.onSelect(undefined, file);\n    }\n    return true;\n  },\n  // Because props is a discriminated union type, eslint isn't smart enough to realize we\n  // are putting all used properties in the dependency array. We can't use destructuring\n  // to extract them or we'll lose the type link between multi & onSelect\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [isAcceptableFile, props.multi, props.onSelect]);\n}\n\n/** Simple (naive) regex to split a `type/subtype;params` MIME type into parts. */\nconst mimeTypeRegex = /([^/]+)\\/([^;]);?(.*)/;\n\n/**\n * Provides event handlers for all types of file upload targets, unifying events into a\n * single `onSelect` event. Does not manage its own state as far as which files are\n * currently selected - this should be done in the parent component.\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n */\nfunction useUnifiedFileSelect(props) {\n  const clickTargetProps = useClickFileSelect(props);\n  const pasteTargetProps = usePasteFileSelect(props);\n  const [isDraggedOver, dropTargetProps] = useDropFileSelect(props);\n  return useMemo(() => ({\n    clickTargetProps,\n    pasteTargetProps,\n    dropTargetProps,\n    isDraggedOver\n  }), [clickTargetProps, dropTargetProps, isDraggedOver, pasteTargetProps]);\n}\n\n/**\n * Provides a click event handler for opening a file select dialog. Calls `onSelect` upon\n * completion.\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n */\nfunction useClickFileSelect(props) {\n  const onSelectFiles = useOnSelectFiles(props);\n  const {\n    multi,\n    acceptedFileTypes\n  } = props;\n  const fileInputRef = useRef(null);\n  const onInputChange = useCallback(function onChange() {\n    // eslint-disable-next-line no-invalid-this\n    if (this.files) onSelectFiles(this.files);\n  }, [onSelectFiles]);\n\n  // The only way to open a file select window is to click on an input type=\"file\" so we\n  // create a hidden one and insert it into the DOM, then simulate a click on it when needed\n  useEffect(function createFileInputClickTarget() {\n    const fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    fileInput.setAttribute('multiple', multi ? 'true' : 'false');\n    if (acceptedFileTypes) fileInput.setAttribute('accept', acceptedFileTypes.join(', '));\n    fileInput.style.display = 'none';\n    fileInput.addEventListener('change', onInputChange);\n    document.body.appendChild(fileInput);\n    fileInputRef.current = fileInput;\n    return () => {\n      var _fileInput$parentNode;\n      fileInputRef.current = null;\n      (_fileInput$parentNode = fileInput.parentNode) === null || _fileInput$parentNode === void 0 ? void 0 : _fileInput$parentNode.removeChild(fileInput);\n    };\n  }, [multi, acceptedFileTypes, onInputChange]);\n\n  // Because we don't use the event object, it's tempting to change the function type from\n  // `MouseEventHandler` to simply `() => void` so the consumer doesn't have to pass a click\n  // event and can programmatically trigger the file select. However, due to security\n  // restrictions the file select dialog can only be opened while handling a user interaction\n  // so the type of this method ensures that it is NOT called programmatically, which would fail.\n  const onClick = useCallback(() => {\n    var _fileInputRef$current;\n    return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n  }, []);\n  return useMemo(() => ({\n    onClick\n  }), [onClick]);\n}\n\n// The `files` property will always be empty before drop (while dragging), but basic info is given in the `items` property\nconst isFileDragEvent = event => Array.from(event.dataTransfer.items).some(({\n  kind\n}) => kind === 'file');\n\n/**\n * Provides event handlers for a file drop region. Calls `onSelect` upon drop. Note that\n * drop targets alone are not accessible - combine with a click target.\n * @return Tuple of `[isDraggedOver, dropTargetProps]` where `isDraggedOver` is true if a valid item\n * is dragged over the drop target and `dropTargetProps` should be spread to the drop\n * target.\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n */\nfunction useDropFileSelect(props) {\n  const onSelectFiles = useOnSelectFiles(props);\n  const [isDraggedOver, setIsDraggedOver] = useState(false);\n  const onDragLeave = useCallback(() => setIsDraggedOver(false), []);\n  const onDragEnter = useCallback(event => {\n    if (!isFileDragEvent(event)) return;\n    setIsDraggedOver(true);\n    event.preventDefault();\n  }, []);\n  const onDragOver = useCallback(event => {\n    // This method must be fast as it will be called every few milliseconds\n    if (!isFileDragEvent(event)) return;\n    event.preventDefault(); // prevents the 'drop caret' from appearing in the textarea because we are not (yet) respecting the specific drop location\n    event.dataTransfer.dropEffect = 'link';\n  }, []);\n  const onDrop = useCallback(event => {\n    if (onSelectFiles(event.dataTransfer.files)) {\n      event.preventDefault();\n      setIsDraggedOver(false);\n    }\n  }, [onSelectFiles]);\n  const dropTargetProps = useMemo(() => ({\n    onDragEnter,\n    onDragOver,\n    onDragLeave,\n    onDrop\n    // onDragStart and onDragEnd are not relevant for system file dragging\n  }), [onDrop, onDragOver, onDragLeave, onDragEnter]);\n  return [isDraggedOver, dropTargetProps];\n}\n\n/**\n * Provides a paste event handler for pasting files. Props should be spread on an element\n * with `contenteditable` or a text input/textarea.\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n */\nfunction usePasteFileSelect(props) {\n  const onSelectFiles = useOnSelectFiles(props);\n  return useMemo(() => ({\n    onPaste: event => {\n      if (onSelectFiles(event.clipboardData.files)) {\n        event.preventDefault();\n      }\n    }\n  }), [onSelectFiles]);\n}\nexport { useClickFileSelect, useDropFileSelect, usePasteFileSelect, useUnifiedFileSelect };","map":{"version":3,"names":["useMemo","useRef","useCallback","useEffect","useState","fileTypeMatcher","fileType","startsWith","file","name","toLowerCase","endsWith","mimeTypeMatch","match","mimeTypeRegex","targetType","targetSubtype","_file$type$match","type","subType","useOnSelectFiles","props","matchers","_props$acceptedFileTy","acceptedFileTypes","map","isAcceptableFile","_matchers$some","some","m","onSelectFiles","files","length","multi","accepted","rejected","push","onSelect","undefined","useUnifiedFileSelect","clickTargetProps","useClickFileSelect","pasteTargetProps","usePasteFileSelect","isDraggedOver","dropTargetProps","useDropFileSelect","fileInputRef","onInputChange","onChange","createFileInputClickTarget","fileInput","document","createElement","setAttribute","join","style","display","addEventListener","body","appendChild","current","_fileInput$parentNode","parentNode","removeChild","onClick","_fileInputRef$current","click","isFileDragEvent","event","Array","from","dataTransfer","items","kind","setIsDraggedOver","onDragLeave","onDragEnter","preventDefault","onDragOver","dropEffect","onDrop","onPaste","clipboardData"],"sources":["/Users/steve/Documents/repos/github/api-insights/node_modules/@primer/react/lib-esm/drafts/hooks/useUnifiedFileSelect.js"],"sourcesContent":["import { useMemo, useRef, useCallback, useEffect, useState } from 'react';\n\n/** @see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept#unique_file_type_specifiers */\n\n/** Returns a function that can check if a file matches the file type. */\nconst fileTypeMatcher = fileType => {\n  if (fileType.startsWith('.')) {\n    return file => file.name.toLowerCase().endsWith(fileType.toLowerCase());\n  } else {\n    const mimeTypeMatch = fileType.match(mimeTypeRegex);\n    if (mimeTypeMatch === null) return () => false; // invalid FileType matches no files\n\n    const [, targetType, targetSubtype] = mimeTypeMatch;\n    return file => {\n      var _file$type$match;\n      const [, type, subType] = (_file$type$match = file.type.match(mimeTypeRegex)) !== null && _file$type$match !== void 0 ? _file$type$match : [];\n      return targetType.toLowerCase() === type.toLowerCase() && (targetSubtype === '*' || targetSubtype.toLowerCase() === subType.toLowerCase());\n    };\n  }\n};\nfunction useOnSelectFiles(props) {\n  const matchers = useMemo(() => {\n    var _props$acceptedFileTy;\n    return (_props$acceptedFileTy = props.acceptedFileTypes) === null || _props$acceptedFileTy === void 0 ? void 0 : _props$acceptedFileTy.map(fileTypeMatcher);\n  }, [props.acceptedFileTypes]);\n  const isAcceptableFile = useCallback(file => {\n    var _matchers$some;\n    return (_matchers$some = matchers === null || matchers === void 0 ? void 0 : matchers.some(m => m(file))) !== null && _matchers$some !== void 0 ? _matchers$some : true;\n  }, [matchers]);\n  return useCallback(function onSelectFiles(files) {\n    if (files.length === 0) return false;\n    if (props.multi) {\n      // isAcceptableFile is not that fast, so only run once per file\n      const accepted = [];\n      const rejected = [];\n      for (const file of files) isAcceptableFile(file) ? accepted.push(file) : rejected.push(file);\n      props.onSelect(accepted, rejected);\n    } else {\n      const file = files[0];\n      if (isAcceptableFile(file)) props.onSelect(file, undefined);else props.onSelect(undefined, file);\n    }\n    return true;\n  },\n  // Because props is a discriminated union type, eslint isn't smart enough to realize we\n  // are putting all used properties in the dependency array. We can't use destructuring\n  // to extract them or we'll lose the type link between multi & onSelect\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [isAcceptableFile, props.multi, props.onSelect]);\n}\n\n/** Simple (naive) regex to split a `type/subtype;params` MIME type into parts. */\nconst mimeTypeRegex = /([^/]+)\\/([^;]);?(.*)/;\n\n/**\n * Provides event handlers for all types of file upload targets, unifying events into a\n * single `onSelect` event. Does not manage its own state as far as which files are\n * currently selected - this should be done in the parent component.\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n */\nfunction useUnifiedFileSelect(props) {\n  const clickTargetProps = useClickFileSelect(props);\n  const pasteTargetProps = usePasteFileSelect(props);\n  const [isDraggedOver, dropTargetProps] = useDropFileSelect(props);\n  return useMemo(() => ({\n    clickTargetProps,\n    pasteTargetProps,\n    dropTargetProps,\n    isDraggedOver\n  }), [clickTargetProps, dropTargetProps, isDraggedOver, pasteTargetProps]);\n}\n\n/**\n * Provides a click event handler for opening a file select dialog. Calls `onSelect` upon\n * completion.\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n */\nfunction useClickFileSelect(props) {\n  const onSelectFiles = useOnSelectFiles(props);\n  const {\n    multi,\n    acceptedFileTypes\n  } = props;\n  const fileInputRef = useRef(null);\n  const onInputChange = useCallback(function onChange() {\n    // eslint-disable-next-line no-invalid-this\n    if (this.files) onSelectFiles(this.files);\n  }, [onSelectFiles]);\n\n  // The only way to open a file select window is to click on an input type=\"file\" so we\n  // create a hidden one and insert it into the DOM, then simulate a click on it when needed\n  useEffect(function createFileInputClickTarget() {\n    const fileInput = document.createElement('input');\n    fileInput.setAttribute('type', 'file');\n    fileInput.setAttribute('multiple', multi ? 'true' : 'false');\n    if (acceptedFileTypes) fileInput.setAttribute('accept', acceptedFileTypes.join(', '));\n    fileInput.style.display = 'none';\n    fileInput.addEventListener('change', onInputChange);\n    document.body.appendChild(fileInput);\n    fileInputRef.current = fileInput;\n    return () => {\n      var _fileInput$parentNode;\n      fileInputRef.current = null;\n      (_fileInput$parentNode = fileInput.parentNode) === null || _fileInput$parentNode === void 0 ? void 0 : _fileInput$parentNode.removeChild(fileInput);\n    };\n  }, [multi, acceptedFileTypes, onInputChange]);\n\n  // Because we don't use the event object, it's tempting to change the function type from\n  // `MouseEventHandler` to simply `() => void` so the consumer doesn't have to pass a click\n  // event and can programmatically trigger the file select. However, due to security\n  // restrictions the file select dialog can only be opened while handling a user interaction\n  // so the type of this method ensures that it is NOT called programmatically, which would fail.\n  const onClick = useCallback(() => {\n    var _fileInputRef$current;\n    return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n  }, []);\n  return useMemo(() => ({\n    onClick\n  }), [onClick]);\n}\n\n// The `files` property will always be empty before drop (while dragging), but basic info is given in the `items` property\nconst isFileDragEvent = event => Array.from(event.dataTransfer.items).some(({\n  kind\n}) => kind === 'file');\n\n/**\n * Provides event handlers for a file drop region. Calls `onSelect` upon drop. Note that\n * drop targets alone are not accessible - combine with a click target.\n * @return Tuple of `[isDraggedOver, dropTargetProps]` where `isDraggedOver` is true if a valid item\n * is dragged over the drop target and `dropTargetProps` should be spread to the drop\n * target.\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n */\nfunction useDropFileSelect(props) {\n  const onSelectFiles = useOnSelectFiles(props);\n  const [isDraggedOver, setIsDraggedOver] = useState(false);\n  const onDragLeave = useCallback(() => setIsDraggedOver(false), []);\n  const onDragEnter = useCallback(event => {\n    if (!isFileDragEvent(event)) return;\n    setIsDraggedOver(true);\n    event.preventDefault();\n  }, []);\n  const onDragOver = useCallback(event => {\n    // This method must be fast as it will be called every few milliseconds\n    if (!isFileDragEvent(event)) return;\n    event.preventDefault(); // prevents the 'drop caret' from appearing in the textarea because we are not (yet) respecting the specific drop location\n    event.dataTransfer.dropEffect = 'link';\n  }, []);\n  const onDrop = useCallback(event => {\n    if (onSelectFiles(event.dataTransfer.files)) {\n      event.preventDefault();\n      setIsDraggedOver(false);\n    }\n  }, [onSelectFiles]);\n  const dropTargetProps = useMemo(() => ({\n    onDragEnter,\n    onDragOver,\n    onDragLeave,\n    onDrop\n    // onDragStart and onDragEnd are not relevant for system file dragging\n  }), [onDrop, onDragOver, onDragLeave, onDragEnter]);\n  return [isDraggedOver, dropTargetProps];\n}\n\n/**\n * Provides a paste event handler for pasting files. Props should be spread on an element\n * with `contenteditable` or a text input/textarea.\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n */\nfunction usePasteFileSelect(props) {\n  const onSelectFiles = useOnSelectFiles(props);\n  return useMemo(() => ({\n    onPaste: event => {\n      if (onSelectFiles(event.clipboardData.files)) {\n        event.preventDefault();\n      }\n    }\n  }), [onSelectFiles]);\n}\n\nexport { useClickFileSelect, useDropFileSelect, usePasteFileSelect, useUnifiedFileSelect };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}