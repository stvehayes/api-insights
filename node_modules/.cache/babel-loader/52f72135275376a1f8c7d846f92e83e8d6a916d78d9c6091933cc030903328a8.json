{"ast":null,"code":"import { isMacOS } from '@primer/behaviors/utils';\nimport { useRef, useCallback, useMemo } from 'react';\n\n/**\n * If the user is composing text, we don't want to respond to\n * the `Enter` key to perform a typical activation\n *\n * Composing text is a special case where the user is inputting\n * text from IME (e.g. Japanese) and we don't want to save the\n * item upon receiving the enter key as that may be part of the\n * selection of the character into the input.\n *\n * issue: https://github.com/github/memex/issues/5680\n * related: https://github.com/github/memex/issues/5680\n * related: https://github.com/facebook/react/issues/3926\n *\n * @param onKeyDown: A keyboard handler callback to wrap with a callback which ignores `ENTER` while\n * composing.\n *\n * @returns props which should be spread onto an `<input>` element\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n **/\nconst useIgnoreKeyboardActionsWhileComposing = onKeyDown => {\n  const isComposingRef = useRef(false);\n  const hasCompositionEndedRef = useRef(false);\n  const handleComposition = useCallback(event => {\n    if (event.type === 'compositionstart') {\n      isComposingRef.current = true;\n      hasCompositionEndedRef.current = false;\n    }\n    if (event.type === 'compositionend') {\n      isComposingRef.current = false;\n      hasCompositionEndedRef.current = true;\n    }\n  }, []);\n  const wrappedOnKeyDown = useCallback(event => {\n    if (event.key === 'Enter' && isComposingRef.current) {\n      return;\n    }\n\n    /*\n     * Safari is known to fire the a unprintable keydown event of 229\n     * after the `compositionend` event.\n     * This is a workaround to prevent the keydown event from firing and causing\n     * the input to be saved.\n     *\n     * Related: https://bugs.webkit.org/show_bug.cgi?id=165004\n     * Related: https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/\n     */\n    if (isMacOS() && event.keyCode === 229 && hasCompositionEndedRef.current) {\n      hasCompositionEndedRef.current = false;\n      return;\n    }\n    onKeyDown(event);\n  }, [onKeyDown]);\n  const inputProps = useMemo(() => {\n    return {\n      onCompositionStart: handleComposition,\n      onCompositionEnd: handleComposition,\n      onKeyDown: wrappedOnKeyDown\n    };\n  }, [handleComposition, wrappedOnKeyDown]);\n  return inputProps;\n};\nexport { useIgnoreKeyboardActionsWhileComposing };","map":{"version":3,"names":["isMacOS","useRef","useCallback","useMemo","useIgnoreKeyboardActionsWhileComposing","onKeyDown","isComposingRef","hasCompositionEndedRef","handleComposition","event","type","current","wrappedOnKeyDown","key","keyCode","inputProps","onCompositionStart","onCompositionEnd"],"sources":["/Users/steve/Documents/repos/github/api-insights/node_modules/@primer/react/lib-esm/drafts/hooks/useIgnoreKeyboardActionsWhileComposing.js"],"sourcesContent":["import { isMacOS } from '@primer/behaviors/utils';\nimport { useRef, useCallback, useMemo } from 'react';\n\n/**\n * If the user is composing text, we don't want to respond to\n * the `Enter` key to perform a typical activation\n *\n * Composing text is a special case where the user is inputting\n * text from IME (e.g. Japanese) and we don't want to save the\n * item upon receiving the enter key as that may be part of the\n * selection of the character into the input.\n *\n * issue: https://github.com/github/memex/issues/5680\n * related: https://github.com/github/memex/issues/5680\n * related: https://github.com/facebook/react/issues/3926\n *\n * @param onKeyDown: A keyboard handler callback to wrap with a callback which ignores `ENTER` while\n * composing.\n *\n * @returns props which should be spread onto an `<input>` element\n *\n * @deprecated Will be removed in v37 (https://github.com/primer/react/issues/3604)\n **/\nconst useIgnoreKeyboardActionsWhileComposing = onKeyDown => {\n  const isComposingRef = useRef(false);\n  const hasCompositionEndedRef = useRef(false);\n  const handleComposition = useCallback(event => {\n    if (event.type === 'compositionstart') {\n      isComposingRef.current = true;\n      hasCompositionEndedRef.current = false;\n    }\n    if (event.type === 'compositionend') {\n      isComposingRef.current = false;\n      hasCompositionEndedRef.current = true;\n    }\n  }, []);\n  const wrappedOnKeyDown = useCallback(event => {\n    if (event.key === 'Enter' && isComposingRef.current) {\n      return;\n    }\n\n    /*\n     * Safari is known to fire the a unprintable keydown event of 229\n     * after the `compositionend` event.\n     * This is a workaround to prevent the keydown event from firing and causing\n     * the input to be saved.\n     *\n     * Related: https://bugs.webkit.org/show_bug.cgi?id=165004\n     * Related: https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/\n     */\n    if (isMacOS() && event.keyCode === 229 && hasCompositionEndedRef.current) {\n      hasCompositionEndedRef.current = false;\n      return;\n    }\n    onKeyDown(event);\n  }, [onKeyDown]);\n  const inputProps = useMemo(() => {\n    return {\n      onCompositionStart: handleComposition,\n      onCompositionEnd: handleComposition,\n      onKeyDown: wrappedOnKeyDown\n    };\n  }, [handleComposition, wrappedOnKeyDown]);\n  return inputProps;\n};\n\nexport { useIgnoreKeyboardActionsWhileComposing };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,yBAAyB;AACjD,SAASC,MAAM,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sCAAsC,GAAGC,SAAS,IAAI;EAC1D,MAAMC,cAAc,GAAGL,MAAM,CAAC,KAAK,CAAC;EACpC,MAAMM,sBAAsB,GAAGN,MAAM,CAAC,KAAK,CAAC;EAC5C,MAAMO,iBAAiB,GAAGN,WAAW,CAACO,KAAK,IAAI;IAC7C,IAAIA,KAAK,CAACC,IAAI,KAAK,kBAAkB,EAAE;MACrCJ,cAAc,CAACK,OAAO,GAAG,IAAI;MAC7BJ,sBAAsB,CAACI,OAAO,GAAG,KAAK;IACxC;IACA,IAAIF,KAAK,CAACC,IAAI,KAAK,gBAAgB,EAAE;MACnCJ,cAAc,CAACK,OAAO,GAAG,KAAK;MAC9BJ,sBAAsB,CAACI,OAAO,GAAG,IAAI;IACvC;EACF,CAAC,EAAE,EAAE,CAAC;EACN,MAAMC,gBAAgB,GAAGV,WAAW,CAACO,KAAK,IAAI;IAC5C,IAAIA,KAAK,CAACI,GAAG,KAAK,OAAO,IAAIP,cAAc,CAACK,OAAO,EAAE;MACnD;IACF;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAIX,OAAO,CAAC,CAAC,IAAIS,KAAK,CAACK,OAAO,KAAK,GAAG,IAAIP,sBAAsB,CAACI,OAAO,EAAE;MACxEJ,sBAAsB,CAACI,OAAO,GAAG,KAAK;MACtC;IACF;IACAN,SAAS,CAACI,KAAK,CAAC;EAClB,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;EACf,MAAMU,UAAU,GAAGZ,OAAO,CAAC,MAAM;IAC/B,OAAO;MACLa,kBAAkB,EAAER,iBAAiB;MACrCS,gBAAgB,EAAET,iBAAiB;MACnCH,SAAS,EAAEO;IACb,CAAC;EACH,CAAC,EAAE,CAACJ,iBAAiB,EAAEI,gBAAgB,CAAC,CAAC;EACzC,OAAOG,UAAU;AACnB,CAAC;AAED,SAASX,sCAAsC"},"metadata":{},"sourceType":"module","externalDependencies":[]}