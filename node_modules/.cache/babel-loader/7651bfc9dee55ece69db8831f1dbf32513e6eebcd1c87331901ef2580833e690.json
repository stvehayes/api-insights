{"ast":null,"code":"import React from 'react';\nimport { getBreakpointDeclarations } from '../utils/getBreakpointDeclarations.js';\nimport Box from '../Box/Box.js';\n\n/* Normalize the value that is received from the prop `when`.\n * For array types : ['narrow', 'wide'] -> {narrow: true, wide: true}\n * For string types: 'narrow' -> {narrow: true}\n */\nfunction normalize(hiddenViewports) {\n  // For array types\n  if (Array.isArray(hiddenViewports)) {\n    const breakpoints = {};\n    // ['narrow', 'wide'] -> {narrow: true, wide: true}\n    for (const breakpoint of hiddenViewports) {\n      breakpoints[breakpoint] = true;\n    }\n    return breakpoints;\n  }\n  // For string types\n  // 'narrow' -> {narrow: true}\n  return {\n    [hiddenViewports]: true\n  };\n}\nconst Hidden = ({\n  when,\n  children\n}) => {\n  // Get breakpoint declarations for the normalized ResponsiveValue object\n  const styles = getBreakpointDeclarations(normalize(when), 'display', () => 'none');\n  // Render the children with the styles\n  return styles ? /*#__PURE__*/React.createElement(Box, {\n    sx: styles\n  }, children) : null;\n};\nHidden.displayName = 'Hidden';\nexport { Hidden };","map":{"version":3,"names":["React","getBreakpointDeclarations","Box","normalize","hiddenViewports","Array","isArray","breakpoints","breakpoint","Hidden","when","children","styles","createElement","sx","displayName"],"sources":["/Users/steve/Documents/repos/github/api-insights/node_modules/@primer/react/lib-esm/Hidden/Hidden.js"],"sourcesContent":["import React from 'react';\nimport { getBreakpointDeclarations } from '../utils/getBreakpointDeclarations.js';\nimport Box from '../Box/Box.js';\n\n/* Normalize the value that is received from the prop `when`.\n * For array types : ['narrow', 'wide'] -> {narrow: true, wide: true}\n * For string types: 'narrow' -> {narrow: true}\n */\nfunction normalize(hiddenViewports) {\n  // For array types\n  if (Array.isArray(hiddenViewports)) {\n    const breakpoints = {};\n    // ['narrow', 'wide'] -> {narrow: true, wide: true}\n    for (const breakpoint of hiddenViewports) {\n      breakpoints[breakpoint] = true;\n    }\n    return breakpoints;\n  }\n  // For string types\n  // 'narrow' -> {narrow: true}\n  return {\n    [hiddenViewports]: true\n  };\n}\nconst Hidden = ({\n  when,\n  children\n}) => {\n  // Get breakpoint declarations for the normalized ResponsiveValue object\n  const styles = getBreakpointDeclarations(normalize(when), 'display', () => 'none');\n  // Render the children with the styles\n  return styles ? /*#__PURE__*/React.createElement(Box, {\n    sx: styles\n  }, children) : null;\n};\nHidden.displayName = 'Hidden';\n\nexport { Hidden };\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,yBAAyB,QAAQ,uCAAuC;AACjF,OAAOC,GAAG,MAAM,eAAe;;AAE/B;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,eAAe,EAAE;EAClC;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,eAAe,CAAC,EAAE;IAClC,MAAMG,WAAW,GAAG,CAAC,CAAC;IACtB;IACA,KAAK,MAAMC,UAAU,IAAIJ,eAAe,EAAE;MACxCG,WAAW,CAACC,UAAU,CAAC,GAAG,IAAI;IAChC;IACA,OAAOD,WAAW;EACpB;EACA;EACA;EACA,OAAO;IACL,CAACH,eAAe,GAAG;EACrB,CAAC;AACH;AACA,MAAMK,MAAM,GAAGA,CAAC;EACdC,IAAI;EACJC;AACF,CAAC,KAAK;EACJ;EACA,MAAMC,MAAM,GAAGX,yBAAyB,CAACE,SAAS,CAACO,IAAI,CAAC,EAAE,SAAS,EAAE,MAAM,MAAM,CAAC;EAClF;EACA,OAAOE,MAAM,GAAG,aAAaZ,KAAK,CAACa,aAAa,CAACX,GAAG,EAAE;IACpDY,EAAE,EAAEF;EACN,CAAC,EAAED,QAAQ,CAAC,GAAG,IAAI;AACrB,CAAC;AACDF,MAAM,CAACM,WAAW,GAAG,QAAQ;AAE7B,SAASN,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}