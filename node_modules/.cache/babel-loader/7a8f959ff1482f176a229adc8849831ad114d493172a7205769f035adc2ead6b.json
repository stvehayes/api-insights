{"ast":null,"code":"import React, { useRef, useState, useCallback } from 'react';\nimport StyledSpinner from '../../Spinner/Spinner.js';\nimport { ActionList } from '../../ActionList/index.js';\nimport Box from '../../Box/Box.js';\nimport { useCombobox } from '../hooks/useCombobox.js';\nimport Overlay from '../../Overlay/Overlay.js';\nimport { getSuggestionValue, getSuggestionKey } from './utils.js';\nimport useIsomorphicLayoutEffect from '../../utils/useIsomorphicLayoutEffect.js';\nconst LoadingIndicator = () => /*#__PURE__*/React.createElement(Box, {\n  sx: {\n    display: 'flex',\n    justifyContent: 'center',\n    py: 2\n  }\n}, /*#__PURE__*/React.createElement(StyledSpinner, {\n  size: \"small\"\n}));\nLoadingIndicator.displayName = \"LoadingIndicator\";\nconst SuggestionListItem = ({\n  suggestion\n}) => {\n  const value = getSuggestionValue(suggestion);\n  const sharedProps = {\n    id: value,\n    children: value,\n    role: 'option',\n    sx: {\n      '&[aria-selected]': {\n        backgroundColor: 'actionListItem.default.activeBg'\n      },\n      '&[data-combobox-option-default]:not([aria-selected])': {\n        backgroundColor: 'actionListItem.default.selectedBg'\n      }\n    }\n  };\n  return typeof suggestion === 'string' ? /*#__PURE__*/React.createElement(ActionList.Item, sharedProps) : suggestion.render(sharedProps);\n};\n\n/**\n * Renders an overlayed list at the given relative coordinates. Handles keyboard navigation\n * and accessibility concerns.\n */\nconst AutocompleteSuggestions = ({\n  suggestions,\n  portalName,\n  triggerCharCoords,\n  onClose,\n  onCommit: externalOnCommit,\n  inputRef,\n  visible,\n  tabInsertsSuggestions,\n  defaultPlacement\n}) => {\n  const overlayRef = useRef(null);\n\n  // It seems wierd to use state instead of a ref here, but because the list is inside an\n  // AnchoredOverlay it is not always mounted - so we want to reinitialize the Combobox when it mounts\n  const [list, setList] = useState(null);\n  const onCommit = useCallback(({\n    option\n  }) => {\n    externalOnCommit(getSuggestionValue(option));\n  }, [externalOnCommit]);\n\n  // Setup keyboard navigation\n  useCombobox({\n    // Even though the list is visible when loading, we don't want to do keyboard binding in that case\n    isOpen: visible && suggestions !== 'loading',\n    listElement: list,\n    inputElement: inputRef.current,\n    onCommit,\n    options: Array.isArray(suggestions) ? suggestions : [],\n    tabInsertsSuggestions,\n    defaultFirstOption: true\n  });\n  const [top, setTop] = useState(0);\n  useIsomorphicLayoutEffect(function recalculateTop() {\n    var _overlayRef$current$o, _overlayRef$current;\n    const overlayHeight = (_overlayRef$current$o = (_overlayRef$current = overlayRef.current) === null || _overlayRef$current === void 0 ? void 0 : _overlayRef$current.offsetHeight) !== null && _overlayRef$current$o !== void 0 ? _overlayRef$current$o : 0;\n    const belowOffset = triggerCharCoords.top + triggerCharCoords.height;\n    const wouldOverflowBelow = belowOffset + overlayHeight > window.innerHeight;\n    const aboveOffset = triggerCharCoords.top - overlayHeight;\n    const wouldOverflowAbove = aboveOffset < 0;\n\n    // Only override the default if it would overflow in the default direction and it would not overflow in the override direction\n    const result = {\n      below: wouldOverflowBelow && !wouldOverflowAbove ? aboveOffset : belowOffset,\n      above: wouldOverflowAbove && !wouldOverflowBelow ? belowOffset : aboveOffset\n    }[defaultPlacement];\n\n    // Sometimes the value can be NaN if layout is not available (ie, SSR or JSDOM)\n    const resultNotNaN = Number.isNaN(result) ? 0 : result;\n    setTop(resultNotNaN);\n  },\n  // this is a cheap effect and we want it to run when pretty much anything that could affect position changes\n  [triggerCharCoords.top, triggerCharCoords.height, suggestions, visible, defaultPlacement]);\n\n  // Conditional rendering appears wrong at first - it means that we are reconstructing the\n  // Combobox instance every time the suggestions appear. But this is what we want - otherwise\n  // the textarea would always have the `combobox` role, which is incorrect (a textarea should\n  // not technically ever be a combobox). We compromise by dynamically applying the combobox\n  // role only when suggestions are available.\n  return visible ? /*#__PURE__*/React.createElement(Overlay, {\n    onEscape: onClose,\n    onClickOutside: onClose,\n    returnFocusRef: inputRef,\n    preventFocusOnOpen: true,\n    portalContainerName: portalName,\n    sx: {\n      position: 'fixed'\n    },\n    top: top,\n    left: triggerCharCoords.left,\n    ref: overlayRef\n  }, /*#__PURE__*/React.createElement(ActionList, {\n    ref: setList\n  }, suggestions === 'loading' ? /*#__PURE__*/React.createElement(LoadingIndicator, null) : suggestions === null || suggestions === void 0 ? void 0 : suggestions.map(suggestion => /*#__PURE__*/React.createElement(SuggestionListItem, {\n    suggestion: suggestion,\n    key: getSuggestionKey(suggestion)\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null);\n};\nAutocompleteSuggestions.displayName = 'SuggestionList';\nexport { AutocompleteSuggestions as default };","map":{"version":3,"names":["React","useRef","useState","useCallback","StyledSpinner","ActionList","Box","useCombobox","Overlay","getSuggestionValue","getSuggestionKey","useIsomorphicLayoutEffect","LoadingIndicator","createElement","sx","display","justifyContent","py","size","displayName","SuggestionListItem","suggestion","value","sharedProps","id","children","role","backgroundColor","Item","render","AutocompleteSuggestions","suggestions","portalName","triggerCharCoords","onClose","onCommit","externalOnCommit","inputRef","visible","tabInsertsSuggestions","defaultPlacement","overlayRef","list","setList","option","isOpen","listElement","inputElement","current","options","Array","isArray","defaultFirstOption","top","setTop","recalculateTop","_overlayRef$current$o","_overlayRef$current","overlayHeight","offsetHeight","belowOffset","height","wouldOverflowBelow","window","innerHeight","aboveOffset","wouldOverflowAbove","result","below","above","resultNotNaN","Number","isNaN","onEscape","onClickOutside","returnFocusRef","preventFocusOnOpen","portalContainerName","position","left","ref","map","key","Fragment","default"],"sources":["/Users/steve/Documents/repos/github/api-insights/node_modules/@primer/react/lib-esm/drafts/InlineAutocomplete/_AutocompleteSuggestions.js"],"sourcesContent":["import React, { useRef, useState, useCallback } from 'react';\nimport StyledSpinner from '../../Spinner/Spinner.js';\nimport { ActionList } from '../../ActionList/index.js';\nimport Box from '../../Box/Box.js';\nimport { useCombobox } from '../hooks/useCombobox.js';\nimport Overlay from '../../Overlay/Overlay.js';\nimport { getSuggestionValue, getSuggestionKey } from './utils.js';\nimport useIsomorphicLayoutEffect from '../../utils/useIsomorphicLayoutEffect.js';\n\nconst LoadingIndicator = () => /*#__PURE__*/React.createElement(Box, {\n  sx: {\n    display: 'flex',\n    justifyContent: 'center',\n    py: 2\n  }\n}, /*#__PURE__*/React.createElement(StyledSpinner, {\n  size: \"small\"\n}));\nLoadingIndicator.displayName = \"LoadingIndicator\";\nconst SuggestionListItem = ({\n  suggestion\n}) => {\n  const value = getSuggestionValue(suggestion);\n  const sharedProps = {\n    id: value,\n    children: value,\n    role: 'option',\n    sx: {\n      '&[aria-selected]': {\n        backgroundColor: 'actionListItem.default.activeBg'\n      },\n      '&[data-combobox-option-default]:not([aria-selected])': {\n        backgroundColor: 'actionListItem.default.selectedBg'\n      }\n    }\n  };\n  return typeof suggestion === 'string' ? /*#__PURE__*/React.createElement(ActionList.Item, sharedProps) : suggestion.render(sharedProps);\n};\n\n/**\n * Renders an overlayed list at the given relative coordinates. Handles keyboard navigation\n * and accessibility concerns.\n */\nconst AutocompleteSuggestions = ({\n  suggestions,\n  portalName,\n  triggerCharCoords,\n  onClose,\n  onCommit: externalOnCommit,\n  inputRef,\n  visible,\n  tabInsertsSuggestions,\n  defaultPlacement\n}) => {\n  const overlayRef = useRef(null);\n\n  // It seems wierd to use state instead of a ref here, but because the list is inside an\n  // AnchoredOverlay it is not always mounted - so we want to reinitialize the Combobox when it mounts\n  const [list, setList] = useState(null);\n  const onCommit = useCallback(({\n    option\n  }) => {\n    externalOnCommit(getSuggestionValue(option));\n  }, [externalOnCommit]);\n\n  // Setup keyboard navigation\n  useCombobox({\n    // Even though the list is visible when loading, we don't want to do keyboard binding in that case\n    isOpen: visible && suggestions !== 'loading',\n    listElement: list,\n    inputElement: inputRef.current,\n    onCommit,\n    options: Array.isArray(suggestions) ? suggestions : [],\n    tabInsertsSuggestions,\n    defaultFirstOption: true\n  });\n  const [top, setTop] = useState(0);\n  useIsomorphicLayoutEffect(function recalculateTop() {\n    var _overlayRef$current$o, _overlayRef$current;\n    const overlayHeight = (_overlayRef$current$o = (_overlayRef$current = overlayRef.current) === null || _overlayRef$current === void 0 ? void 0 : _overlayRef$current.offsetHeight) !== null && _overlayRef$current$o !== void 0 ? _overlayRef$current$o : 0;\n    const belowOffset = triggerCharCoords.top + triggerCharCoords.height;\n    const wouldOverflowBelow = belowOffset + overlayHeight > window.innerHeight;\n    const aboveOffset = triggerCharCoords.top - overlayHeight;\n    const wouldOverflowAbove = aboveOffset < 0;\n\n    // Only override the default if it would overflow in the default direction and it would not overflow in the override direction\n    const result = {\n      below: wouldOverflowBelow && !wouldOverflowAbove ? aboveOffset : belowOffset,\n      above: wouldOverflowAbove && !wouldOverflowBelow ? belowOffset : aboveOffset\n    }[defaultPlacement];\n\n    // Sometimes the value can be NaN if layout is not available (ie, SSR or JSDOM)\n    const resultNotNaN = Number.isNaN(result) ? 0 : result;\n    setTop(resultNotNaN);\n  },\n  // this is a cheap effect and we want it to run when pretty much anything that could affect position changes\n  [triggerCharCoords.top, triggerCharCoords.height, suggestions, visible, defaultPlacement]);\n\n  // Conditional rendering appears wrong at first - it means that we are reconstructing the\n  // Combobox instance every time the suggestions appear. But this is what we want - otherwise\n  // the textarea would always have the `combobox` role, which is incorrect (a textarea should\n  // not technically ever be a combobox). We compromise by dynamically applying the combobox\n  // role only when suggestions are available.\n  return visible ? /*#__PURE__*/React.createElement(Overlay, {\n    onEscape: onClose,\n    onClickOutside: onClose,\n    returnFocusRef: inputRef,\n    preventFocusOnOpen: true,\n    portalContainerName: portalName,\n    sx: {\n      position: 'fixed'\n    },\n    top: top,\n    left: triggerCharCoords.left,\n    ref: overlayRef\n  }, /*#__PURE__*/React.createElement(ActionList, {\n    ref: setList\n  }, suggestions === 'loading' ? /*#__PURE__*/React.createElement(LoadingIndicator, null) : suggestions === null || suggestions === void 0 ? void 0 : suggestions.map(suggestion => /*#__PURE__*/React.createElement(SuggestionListItem, {\n    suggestion: suggestion,\n    key: getSuggestionKey(suggestion)\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null);\n};\nAutocompleteSuggestions.displayName = 'SuggestionList';\n\nexport { AutocompleteSuggestions as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}